// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Creator extends ethereum.Event {
  get params(): Creator__Params {
    return new Creator__Params(this);
  }
}

export class Creator__Params {
  _event: Creator;

  constructor(event: Creator) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Support extends ethereum.Event {
  get params(): Support__Params {
    return new Support__Params(this);
  }
}

export class Support__Params {
  _event: Support;

  constructor(event: Support) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get supporter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenType(): string {
    return this._event.parameters[3].value.toString();
  }

  get tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenType(): string {
    return this._event.parameters[3].value.toString();
  }

  get tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Fibril extends ethereum.SmartContract {
  static bind(address: Address): Fibril {
    return new Fibril("Fibril", address);
  }

  NULL_ADDRESS(): Address {
    let result = super.call("NULL_ADDRESS", "NULL_ADDRESS():(address)", []);

    return result[0].toAddress();
  }

  try_NULL_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall("NULL_ADDRESS", "NULL_ADDRESS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBalance(_creator: Address, _token: Address): BigInt {
    let result = super.call(
      "getBalance",
      "getBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_creator), ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_getBalance(
    _creator: Address,
    _token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBalance",
      "getBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_creator), ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCreatorCount(): BigInt {
    let result = super.call(
      "getCreatorCount",
      "getCreatorCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCreatorCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCreatorCount",
      "getCreatorCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCreatorId(_creator: Address): BigInt {
    let result = super.call("getCreatorId", "getCreatorId(address):(uint256)", [
      ethereum.Value.fromAddress(_creator)
    ]);

    return result[0].toBigInt();
  }

  try_getCreatorId(_creator: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCreatorId",
      "getCreatorId(address):(uint256)",
      [ethereum.Value.fromAddress(_creator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SupportCall extends ethereum.Call {
  get inputs(): SupportCall__Inputs {
    return new SupportCall__Inputs(this);
  }

  get outputs(): SupportCall__Outputs {
    return new SupportCall__Outputs(this);
  }
}

export class SupportCall__Inputs {
  _call: SupportCall;

  constructor(call: SupportCall) {
    this._call = call;
  }

  get _creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SupportCall__Outputs {
  _call: SupportCall;

  constructor(call: SupportCall) {
    this._call = call;
  }
}

export class SupportWithETHCall extends ethereum.Call {
  get inputs(): SupportWithETHCall__Inputs {
    return new SupportWithETHCall__Inputs(this);
  }

  get outputs(): SupportWithETHCall__Outputs {
    return new SupportWithETHCall__Outputs(this);
  }
}

export class SupportWithETHCall__Inputs {
  _call: SupportWithETHCall;

  constructor(call: SupportWithETHCall) {
    this._call = call;
  }

  get _creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SupportWithETHCall__Outputs {
  _call: SupportWithETHCall;

  constructor(call: SupportWithETHCall) {
    this._call = call;
  }
}

export class SupportWithNFTCall extends ethereum.Call {
  get inputs(): SupportWithNFTCall__Inputs {
    return new SupportWithNFTCall__Inputs(this);
  }

  get outputs(): SupportWithNFTCall__Outputs {
    return new SupportWithNFTCall__Outputs(this);
  }
}

export class SupportWithNFTCall__Inputs {
  _call: SupportWithNFTCall;

  constructor(call: SupportWithNFTCall) {
    this._call = call;
  }

  get _creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SupportWithNFTCall__Outputs {
  _call: SupportWithNFTCall;

  constructor(call: SupportWithNFTCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawNFTCall extends ethereum.Call {
  get inputs(): WithdrawNFTCall__Inputs {
    return new WithdrawNFTCall__Inputs(this);
  }

  get outputs(): WithdrawNFTCall__Outputs {
    return new WithdrawNFTCall__Outputs(this);
  }
}

export class WithdrawNFTCall__Inputs {
  _call: WithdrawNFTCall;

  constructor(call: WithdrawNFTCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawNFTCall__Outputs {
  _call: WithdrawNFTCall;

  constructor(call: WithdrawNFTCall) {
    this._call = call;
  }
}
